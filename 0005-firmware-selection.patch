Index: src/drivers/net/ethernet/qlogic/qed/qed_main.c
===================================================================
--- src.orig/drivers/net/ethernet/qlogic/qed/qed_main.c	2017-04-26 20:47:44.447637391 +0200
+++ src/drivers/net/ethernet/qlogic/qed/qed_main.c	2017-04-26 20:48:11.328320149 +0200
@@ -69,22 +69,91 @@
 MODULE_LICENSE("GPL");
 MODULE_VERSION(DRV_MODULE_VERSION);
 
-#define FW_FILE_VERSION				\
-	__stringify(FW_MAJOR_VERSION) "."	\
-	__stringify(FW_MINOR_VERSION) "."	\
-	__stringify(FW_REVISION_VERSION) "."	\
-	__stringify(FW_ENGINEERING_VERSION)	\
-	FW_RELEASE_SUFFIX
-
-#define QED_FW_FILE_NAME	\
-	"qed/qed_init_values_zipped-" FW_FILE_VERSION ".bin"
-
-MODULE_FIRMWARE(QED_FW_FILE_NAME);
+#define FW_FILE_VER(maj, min, rev, eng, sfx) \
+	__stringify(maj) "."	\
+	__stringify(min) "."	\
+	__stringify(rev) "."	\
+	__stringify(eng)	\
+	sfx
+#define FW_FILE_VERSION FW_FILE_VER(FW_MAJOR_VERSION, FW_MINOR_VERSION, \
+	FW_REVISION_VERSION, FW_ENGINEERING_VERSION, FW_RELEASE_SUFFIX)
+
+#define QED_FW_FILE(ver) \
+	"qed/qed_init_values_zipped-" ver ".bin"
+#define QED_FW_FILE_NAME QED_FW_FILE(FW_FILE_VERSION)
+
+static char fw_name[64] = QED_FW_FILE_NAME;
+static int fw_name_idx = 0;
+
+#define QED_HELP_STR(maj, min, rev, eng, sfx) \
+	"\n\t\t\t" QED_FW_FILE(FW_FILE_VER(maj, min, rev, eng, sfx))
+#define QED_ARR_DEF(maj, min, rev, eng, sfx) \
+	{ QED_FW_FILE(FW_FILE_VER(maj, min, rev, eng, sfx)), \
+		maj, min, rev, eng },
+#define QED_FW_INFO(maj, min, rev, eng, sfx) \
+	MODULE_FIRMWARE(QED_FW_FILE(FW_FILE_VER(maj, min, rev, eng, sfx)));
+
+#define QED_FW_LIST(fn) \
+	fn(FW_MAJOR_VERSION, FW_MINOR_VERSION, FW_REVISION_VERSION, \
+		FW_ENGINEERING_VERSION, FW_RELEASE_SUFFIX) \
+	fn(8, 15,  3, 0, "") \
+	fn(8, 10, 10, 0, "") \
+	fn(8, 10,  5, 0, "") \
+	fn(8,  7,  3, 0, "") \
+	fn(8,  4,  2, 0, "")
+
+QED_FW_LIST(QED_FW_INFO)
+
+module_param_string(fw_name, fw_name, ARRAY_SIZE(fw_name), S_IRUGO);
+MODULE_PARM_DESC(fw_name,
+	"Firmware file name. Only a set of firmware filenames allowed:"
+	QED_FW_LIST(QED_HELP_STR));
+
+static struct {
+	const char* str;
+	int major;
+	int minor;
+	int revision;
+	int eng_release;
+} qed_allowed_fw_files[] = { QED_FW_LIST(QED_ARR_DEF) };
+
+#undef QED_FW_LIST
+#undef QED_FW_INFO
+#undef QED_ARR_DEF
+#undef QED_HELP_STR
+
+/* XXX It should be parameter setter */
+static void qed_fw_name(void)
+{
+	size_t i;
+	bool found = false;
+
+	for (i = 0; i < ARRAY_SIZE(qed_allowed_fw_files); i++)
+		if (!strcmp(fw_name, qed_allowed_fw_files[i].str)) {
+			found = true;
+			break;
+		}
+
+	if (!found) {
+		fw_name_idx = 0;
+		pr_warn("qed: Provided firmware path (\"%s\") is not among "
+			"allowed ones, resetting to default \"%s\"",
+			fw_name, qed_allowed_fw_files[fw_name_idx].str);
+
+		/* XXX It's a bit sloppy */
+		BUILD_BUG_ON(sizeof(QED_FW_FILE_NAME) > sizeof(fw_name));
+		strcpy(fw_name, qed_allowed_fw_files[0].str);
+	} else {
+		fw_name_idx = i;
+	}
+}
 
 static int __init qed_init(void)
 {
 	pr_info("%s", version);
 
+	qed_fw_name();
+
 	return 0;
 }
 
@@ -243,10 +312,10 @@
 	ether_addr_copy(dev_info->hw_mac, cdev->hwfns[0].hw_info.hw_mac_addr);
 
 	if (IS_PF(cdev)) {
-		dev_info->fw_major = FW_MAJOR_VERSION;
-		dev_info->fw_minor = FW_MINOR_VERSION;
-		dev_info->fw_rev = FW_REVISION_VERSION;
-		dev_info->fw_eng = FW_ENGINEERING_VERSION;
+		dev_info->fw_major = qed_allowed_fw_files[fw_name_idx].major;
+		dev_info->fw_minor = qed_allowed_fw_files[fw_name_idx].minor;
+		dev_info->fw_rev = qed_allowed_fw_files[fw_name_idx].revision;
+		dev_info->fw_eng = qed_allowed_fw_files[fw_name_idx].eng_release;
 		dev_info->mf_mode = cdev->mf_mode;
 		dev_info->tx_switching = true;
 
@@ -913,12 +982,12 @@
 		goto err;
 
 	if (IS_PF(cdev)) {
-		rc = request_firmware(&cdev->firmware, QED_FW_FILE_NAME,
+		rc = request_firmware(&cdev->firmware, fw_name,
 				      &cdev->pdev->dev);
 		if (rc) {
 			DP_NOTICE(cdev,
 				  "Failed to find fw file - /lib/firmware/%s\n",
-				  QED_FW_FILE_NAME);
+				  fw_name);
 			goto err;
 		}
 	}
